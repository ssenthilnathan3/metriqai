# Use Node.js as base image for frontend development
FROM node:18-alpine

# Install required build dependencies
RUN apk add --no-cache \
    python3 \
    py3-pip \
    make \
    g++ \
    nginx

# Set working directory
WORKDIR /app

# Copy package files for both frontend and backend
COPY frontend/package*.json ./frontend/
COPY backend/requirements.txt ./backend/

# Install frontend dependencies
WORKDIR /app/frontend
RUN npm install --legacy-peer-deps

# Install backend dependencies
WORKDIR /app/backend
RUN pip install -r requirements.txt

# Copy the rest of the application
WORKDIR /app
COPY . .

# Setup nginx for development
COPY nginx.conf /etc/nginx/http.d/default.conf
RUN mkdir -p /run/nginx

# Expose ports
EXPOSE 3000 8000 80

# Environment variables
ENV HOST=0.0.0.0
ENV PORT=8000
ENV NODE_ENV=development
ENV WATCHFILES_FORCE_POLLING=true

# Create start-dev script
RUN echo '#!/bin/sh\n\
nginx &\n\
cd /app/frontend && npm run dev &\n\
cd /app/backend && python run.py\n\
wait' > /app/start-dev.sh && chmod +x /app/start-dev.sh

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Start development servers
CMD ["/app/start-dev.sh"]
